list(GET CPACK_INSTALL_CMAKE_PROJECTS 0 PROJECT_DIR)
list(GET CPACK_INSTALL_CMAKE_PROJECTS 0 1 PROJECT_DIR_AND_NAME)
string(REGEX REPLACE "^(.*)-([^-]*)-([^-]*)$" "\\1" SYSTEM_NAME "${CPACK_SYSTEM_NAME}")
string(REGEX REPLACE "^(.*)-([^-]*)-([^-]*)$" "\\2" SYSTEM_ARCHITECTURE "${CPACK_SYSTEM_NAME}")
string(REGEX REPLACE "^(.*)-([^-]*)-([^-]*)$" "\\3" SYSTEM_ENDIAN "${CPACK_SYSTEM_NAME}")


file(READ "${CPACK_PACKAGE_DESCRIPTION_FILE}" DESCRIPTION)
string(STRIP "${DESCRIPTION}" DESCRIPTION)
string(REGEX REPLACE "\r\n?" "\n" DESCRIPTION "${DESCRIPTION}") # line breaks
string(REGEX REPLACE "\n\n+" "\r" DESCRIPTION "${DESCRIPTION}") # paragraph breaks
string(REGEX REPLACE "^[^\r]+\n=+\r" "" DESCRIPTION "${DESCRIPTION}") # remove heading
string(REGEX MATCH "^[^\r]+\r[^\r]+" DESCRIPTION "${DESCRIPTION}")    # first two paragraphs
string(REPLACE "\r" "\n\n" DESCRIPTION "${DESCRIPTION}")

file(WRITE "${PROJECT_DIR}/desc" "${DESCRIPTION}")
set(CPACK_RPM_PACKAGE_DESCRIPTION "${PROJECT_DIR}/desc")

string(REPLACE "\n\n" "\n.\n" DESCRIPTION "${DESCRIPTION}")
string(REPLACE "\n" "\n " DESCRIPTION "ComicSight Comic Book Viewer\n${DESCRIPTION}")
set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "${DESCRIPTION}")


file(READ "${PROJECT_DIR}/version.c" VERSION)
string(REGEX REPLACE "^.*char[^\r\n]*=[^\r\n]*\"([^\r\n]*)\".*$" "\\1" VERSION "${VERSION}")
if(VERSION MATCHES "\r|\n")
  message(FATAL_ERROR "version file could not be parsed: ${PROJECT_DIR}/version.c")
endif(VERSION MATCHES "\r|\n")

set(CPACK_PACKAGE_VERSION "${VERSION}")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")


if(UNIX AND NOT APPLE)
    set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${PROJECT_DIR_AND_NAME};x11;/")
endif(UNIX AND NOT APPLE)

if(NOT CPACK_GENERATOR STREQUAL "DEB" AND NOT CPACK_GENERATOR STREQUAL "RPM")
    set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${PROJECT_DIR_AND_NAME};unrar;/")
endif(NOT CPACK_GENERATOR STREQUAL "DEB" AND NOT CPACK_GENERATOR STREQUAL "RPM")

if(UNIX AND NOT APPLE AND NOT CPACK_GENERATOR STREQUAL "RPM")
    set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${PROJECT_DIR_AND_NAME};deb;/")
endif(UNIX AND NOT APPLE AND NOT CPACK_GENERATOR STREQUAL "RPM")

if(CPACK_GENERATOR STREQUAL "DragNDrop" OR CPACK_GENERATOR STREQUAL "Bundle")
    set(CPACK_RESOURCE_FILE_LICENSE)
    set(CPACK_INSTALL_CMAKE_PROJECTS "${PROJECT_DIR_AND_NAME};osxinstaller;/")
endif(CPACK_GENERATOR STREQUAL "DragNDrop" OR CPACK_GENERATOR STREQUAL "Bundle")

if(CPACK_GENERATOR STREQUAL "DEB")
    if(SYSTEM_ARCHITECTURE MATCHES "i.86")
        set(SYSTEM_ARCHITECTURE "i386")
    endif(SYSTEM_ARCHITECTURE MATCHES "i.86")

    if(SYSTEM_ARCHITECTURE MATCHES "x86_64")
        set(SYSTEM_ARCHITECTURE "amd64")
    endif(SYSTEM_ARCHITECTURE MATCHES "x86_64")

    if(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")
        set(SYSTEM_ARCHITECTURE "armhf")
    else(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")
        if(SYSTEM_ARCHITECTURE MATCHES "arm")
            if(SYSTEM_ENDIAN MATCHES "el")
                set(SYSTEM_ARCHITECTURE "armel")
            else(SYSTEM_ENDIAN MATCHES "el")
                set(SYSTEM_ARCHITECTURE "arm")
            endif(SYSTEM_ENDIAN MATCHES "el")
        endif(SYSTEM_ARCHITECTURE MATCHES "arm")
    endif(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")

    if(SYSTEM_ARCHITECTURE MATCHES "ppc")
        set(SYSTEM_ARCHITECTURE "powerpc")
    endif(SYSTEM_ARCHITECTURE MATCHES "ppc")

    if(SYSTEM_ARCHITECTURE MATCHES "mips")
        if(SYSTEM_ENDIAN MATCHES "el")
            set(SYSTEM_ARCHITECTURE "mipsel")
        else(SYSTEM_ENDIAN MATCHES "el")
            set(SYSTEM_ARCHITECTURE "mips")
        endif(SYSTEM_ENDIAN MATCHES "el")
    endif(SYSTEM_ARCHITECTURE MATCHES "mips")

    if(SYSTEM_ARCHITECTURE MATCHES "avr32")
        set(SYSTEM_ARCHITECTURE "AVR32")
    endif(SYSTEM_ARCHITECTURE MATCHES "avr32")

    if(SYSTEM_NAME MATCHES "hurd" OR SYSTEM_NAME STREQUAL "gnu")
        set(SYSTEM_NAME "hurd")
    endif(SYSTEM_NAME MATCHES "hurd" OR SYSTEM_NAME STREQUAL "gnu")

    if(SYSTEM_NAME MATCHES "kfreebsd")
        set(SYSTEM_NAME "kfreebsd")
    endif(SYSTEM_NAME MATCHES "kfreebsd")

    if(SYSTEM_NAME MATCHES "netbsd")
        set(SYSTEM_NAME "netbsd")
    endif(SYSTEM_NAME MATCHES "netbsd")

    if(SYSTEM_NAME STREQUAL "linux")
        set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "${SYSTEM_ARCHITECTURE}")
    else(SYSTEM_NAME STREQUAL "linux")
        set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "${SYSTEM_NAME}-${SYSTEM_ARCHITECTURE}")
    endif(SYSTEM_NAME STREQUAL "linux")

    string(TOLOWER "${CPACK_PACKAGE_NAME}" CPACK_PACKAGE_NAME_LOWERCASE)
    set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME_LOWERCASE}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
endif(CPACK_GENERATOR STREQUAL "DEB")

if(CPACK_GENERATOR STREQUAL "RPM")
    if(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")
        set(SYSTEM_ARCHITECTURE "armhfp")
    else(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")
        if(SYSTEM_ARCHITECTURE MATCHES "arm|mips")
            set(SYSTEM_ARCHITECTURE "${SYSTEM_ARCHITECTURE}${SYSTEM_ENDIAN}")
        endif(SYSTEM_ARCHITECTURE MATCHES "arm|mips")
    endif(SYSTEM_ARCHITECTURE MATCHES "arm.*hf")

    string(TOLOWER "${CPACK_PACKAGE_NAME}" CPACK_PACKAGE_NAME_LOWERCASE)
    set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME_LOWERCASE}-${CPACK_PACKAGE_VERSION}.${SYSTEM_ARCHITECTURE}")
endif(CPACK_GENERATOR STREQUAL "RPM")
