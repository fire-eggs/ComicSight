# SYSTEM_ARCHITECTURE and SYSTEM_ENDIAN should be set before including this script

string(TOLOWER "${CMAKE_SYSTEM_NAME}" SYSTEM_IDS)
string(TOLOWER "${CMAKE_CXX_COMPILER_ID}" COMPILER_IDS)
string(TOLOWER "${SYSTEM_ARCHITECTURE}" ARCHITECTURE_IDS)
string(TOLOWER "${SYSTEM_ENDIAN}" ENDIAN_IDS)

string(REGEX REPLACE "(i.86)" "x86;\\1" ARCHITECTURE_IDS "${ARCHITECTURE_IDS}")
string(REGEX REPLACE "(x86_64)" "amd64;x64;\\1" ARCHITECTURE_IDS "${ARCHITECTURE_IDS}")
string(REGEX REPLACE "(armv?[0-9]*(hf)?)" "arm;\\1" ARCHITECTURE_IDS "${ARCHITECTURE_IDS}")
string(REGEX REPLACE "((armv[0-9]*)hf?)" "\\2;\\1" ARCHITECTURE_IDS "${ARCHITECTURE_IDS}")

if(UNIX)
    list(INSERT SYSTEM_IDS 0 "unix")
endif(UNIX)
if(APPLE)
    list(INSERT SYSTEM_IDS 0 "osx")
endif(APPLE)
if(WIN32)
    list(INSERT SYSTEM_IDS 0 "win")
endif(WIN32)
if(CMAKE_COMPILER_IS_GNUCXX)
    list(INSERT COMPILER_IDS 0 "gcc")
endif(CMAKE_COMPILER_IS_GNUCXX)
if(MINGW)
    list(INSERT SYSTEM_IDS 0 "win")
    list(INSERT COMPILER_IDS 0 "mingw")
endif(MINGW)
if(MSVC)
    list(INSERT SYSTEM_IDS 0 "win")
    list(INSERT COMPILER_IDS 0 "msvc")
endif(MSVC)

list(REMOVE_DUPLICATES SYSTEM_IDS)
list(REMOVE_DUPLICATES COMPILER_IDS)
list(REMOVE_DUPLICATES ARCHITECTURE_IDS)

list(APPEND SYSTEM_IDS "NO")
list(APPEND COMPILER_IDS "NO")
list(APPEND ARCHITECTURE_IDS "NO")
list(APPEND ENDIAN_IDS "NO")

foreach(DIR "${PROJECT_SOURCE_DIR}/lib" "${PROJECT_SOURCE_DIR}/lib/build")
    foreach(SYSTEM_ID ${SYSTEM_IDS})
        foreach(ARCHITECTURE_ID ${ARCHITECTURE_IDS})
            foreach(ENDIAN_ID ${ENDIAN_IDS})
                foreach(COMPILER_ID ${COMPILER_IDS})
                    set(ID)
                    if(SYSTEM_ID)
                        list(APPEND ID "${SYSTEM_ID}")
                    endif(SYSTEM_ID)
                    if(ARCHITECTURE_ID)
                        list(APPEND ID "${ARCHITECTURE_ID}")
                    endif(ARCHITECTURE_ID)
                    if(ENDIAN_ID)
                        list(APPEND ID "${ENDIAN_ID}")
                    endif(ENDIAN_ID)
                    if(COMPILER_ID)
                        list(APPEND ID "${COMPILER_ID}")
                    endif(COMPILER_ID)

                    if(ID)
                        string(REPLACE ";" "-" ID "${ID}")
                        set(ID "${DIR}/${ID}")

                        if(EXISTS "${ID}")
                            message(STATUS "Additional prefix search path: ${ID}")
                            list(APPEND CMAKE_FIND_ROOT_PATH "${ID}")
                            list(APPEND CMAKE_PREFIX_PATH "${ID}")
                            if(EXISTS "${ID}/include")
                                include_directories("${ID}/include")
                            endif(EXISTS "${ID}/include")
                        endif(EXISTS "${ID}")
                    endif(ID)
                endforeach(COMPILER_ID ${COMPILER_IDS})
            endforeach(ENDIAN_ID ${ENDIAN_IDS})
        endforeach(ARCHITECTURE_ID ${ARCHITECTURE_IDS})
    endforeach(SYSTEM_ID ${SYSTEM_IDS})
endforeach(DIR "${PROJECT_SOURCE_DIR}/lib" "${PROJECT_SOURCE_DIR}/lib/build")

# prefer libraries in /usr (e.g. not MacPorts libraries in /opt/local)
# and enable checking /usr also for external utilities like unRAR
if(UNIX)
    list(APPEND CMAKE_FIND_ROOT_PATH "/usr")
    list(APPEND CMAKE_PREFIX_PATH "/usr")
endif(UNIX)
