diff -ru fltk-1.3.2.orig/FL/Fl_Menu_Item.H fltk-1.3.2/FL/Fl_Menu_Item.H
--- fltk-1.3.2.orig/FL/Fl_Menu_Item.H	2011-07-19 05:49:30 +0200
+++ fltk-1.3.2/FL/Fl_Menu_Item.H	2013-12-04 00:14:05 +0100
@@ -240,7 +240,7 @@
     for the menu item's callback function.
     \see Fl_Callback_p Fl_MenuItem::callback() const
    */
-  void callback(Fl_Callback1*c, long p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)p;}
+  void callback(Fl_Callback1*c, long p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)(fl_intptr_t)p;}
 
   /**
     Gets the user_data() argument that is sent to the callback function.
@@ -264,7 +264,7 @@
     and stores it in the menu item's userdata() member.
     This may not be portable to some machines.
   */
-  void argument(long v) {user_data_ = (void*)v;}
+  void argument(long v) {user_data_ = (void*)(fl_intptr_t)v;}
 
   /** Gets what key combination shortcut will trigger the menu item. */
   int shortcut() const {return shortcut_;}
@@ -388,7 +388,7 @@
     the callback.
     You must first check that callback() is non-zero before calling this.
   */
-  void do_callback(Fl_Widget* o,long arg) const {callback_(o, (void*)arg);}
+  void do_callback(Fl_Widget* o,long arg) const {callback_(o, (void*)(fl_intptr_t)arg);}
 
   // back-compatibility, do not use:
 
diff -ru fltk-1.3.2.orig/FL/Fl_Widget.H fltk-1.3.2/FL/Fl_Widget.H
--- fltk-1.3.2.orig/FL/Fl_Widget.H	2012-04-23 21:12:06 +0200
+++ fltk-1.3.2/FL/Fl_Widget.H	2013-12-04 00:14:05 +0100
@@ -572,7 +572,7 @@
       \param[in] cb new callback
       \param[in] p user data
    */
-  void callback(Fl_Callback1*cb, long p=0) {callback_=(Fl_Callback*)cb; user_data_=(void*)p;}
+  void callback(Fl_Callback1*cb, long p=0) {callback_=(Fl_Callback*)cb; user_data_=(void*)(fl_intptr_t)p;}
 
   /** Gets the user data for this widget.
       Gets the current user data (void *) argument that is passed to the callback function.
@@ -594,7 +594,7 @@
       \todo The user data value must be implemented using \em intptr_t or similar
       to avoid 64-bit machine incompatibilities.
    */
-  void argument(long v) {user_data_ = (void*)v;}
+  void argument(long v) {user_data_ = (void*)(fl_intptr_t)v;}
 
   /** Returns the conditions under which the callback is called.
 
@@ -832,7 +832,7 @@
       \param[in] arg call the callback with \p arg as the user data argument
       \see callback()
    */
-  void do_callback(Fl_Widget* o,long arg) {do_callback(o,(void*)arg);}
+  void do_callback(Fl_Widget* o,long arg) {do_callback(o,(void*)(fl_intptr_t)arg);}
 
   // Causes a widget to invoke its callback function with arbitrary arguments.
   // Documentation and implementation in Fl_Widget.cxx
diff -ru fltk-1.3.2.orig/src/Fl.cxx fltk-1.3.2/src/Fl.cxx
--- fltk-1.3.2.orig/src/Fl.cxx	2012-08-16 21:59:36 +0200
+++ fltk-1.3.2/src/Fl.cxx	2013-12-04 00:13:58 +0100
@@ -1177,7 +1177,7 @@
     dnd_flag = 1;
     belowmouse(0);
     dnd_flag = 0;
-    return 1;
+    break;
 
   case FL_DND_RELEASE:
     wi = belowmouse();
diff -ru fltk-1.3.2.orig/src/Fl_cocoa.mm fltk-1.3.2/src/Fl_cocoa.mm
--- fltk-1.3.2.orig/src/Fl_cocoa.mm	2012-11-30 19:20:36 +0100
+++ fltk-1.3.2/src/Fl_cocoa.mm	2013-12-04 00:14:13 +0100
@@ -1814,11 +1814,42 @@
 }
 - (NSDragOperation)draggingEntered:(id < NSDraggingInfo >)sender
 {
+  static char *DragData = NULL;
   fl_lock_function();
   Fl_Window *target = [(FLWindow*)[self window] getFl_Window];
   update_e_xy_and_e_xy_root([self window]);
   fl_dnd_target_window = target;
+
+  NSPasteboard *pboard;
+  // NSDragOperation sourceDragMask;
+  // sourceDragMask = [sender draggingSourceOperationMask];
+  pboard = [sender draggingPasteboard];
+  if (DragData) { free(DragData); DragData = NULL; }
+  if ( [[pboard types] containsObject:NSFilenamesPboardType] ) {
+    CFArrayRef files = (CFArrayRef)[pboard propertyListForType:NSFilenamesPboardType];
+    CFStringRef all = CFStringCreateByCombiningStrings(NULL, files, CFSTR("\n"));
+    int l = CFStringGetMaximumSizeForEncoding(CFStringGetLength(all), kCFStringEncodingUTF8);
+    DragData = (char *)malloc(l + 1);
+    CFStringGetCString(all, DragData, l + 1, kCFStringEncodingUTF8);
+    CFRelease(all);
+  }
+  else if ( [[pboard types] containsObject:NSStringPboardType] ) {
+    NSData *data = [pboard dataForType:NSStringPboardType];
+    DragData = (char *)malloc([data length] + 1);
+    [data getBytes:DragData];
+    DragData[[data length]] = 0;
+    convert_crlf(DragData, strlen(DragData));
+  }
+
+  Fl::e_text = DragData;
+  Fl::e_length = DragData ? strlen(DragData) : 0;
+
   int ret = Fl::handle( FL_DND_ENTER, target );
+
+  if (DragData) { free(DragData); DragData = NULL; }
+  Fl::e_text = NULL;
+  Fl::e_length = 0;
+
   breakMacEventLoop();
   fl_unlock_function();
   Fl::flush();
@@ -1895,6 +1926,7 @@
     Fl::handle( FL_DND_LEAVE, fl_dnd_target_window );
     fl_dnd_target_window = 0;
   }
+  Fl::flush();
   fl_unlock_function();
 }
 - (NSDragOperation)draggingSourceOperationMaskForLocal:(BOOL)isLocal
diff -ru fltk-1.3.2.orig/src/fl_dnd_win32.cxx fltk-1.3.2/src/fl_dnd_win32.cxx
--- fltk-1.3.2.orig/src/fl_dnd_win32.cxx	2012-08-18 12:32:50 +0200
+++ fltk-1.3.2/src/fl_dnd_win32.cxx	2013-12-04 00:14:22 +0100
@@ -254,6 +254,8 @@
       *q = 0;
       currDragSize = (int) (q - currDragData);
       currDragData = (char*)realloc(currDragData, currDragSize + 1);
+      Fl::e_length = currDragSize;
+      Fl::e_text = currDragData;
       GlobalUnlock( medium.hGlobal );
       ReleaseStgMedium( &medium );
       currDragResult = 1;
@@ -289,6 +291,9 @@
         currDragData[currDragSize] = 0;
         free(bu);
 
+      Fl::e_length = currDragSize;
+      Fl::e_text = currDragData;
+
 //    Fl::belowmouse()->handle(FL_DROP);
 //      free( Fl::e_text );
       ReleaseStgMedium( &medium );
diff -ru fltk-1.3.2.orig/src/Fl_x.cxx fltk-1.3.2/src/Fl_x.cxx
--- fltk-1.3.2.orig/src/Fl_x.cxx	2012-10-16 16:35:34 +0200
+++ fltk-1.3.2/src/Fl_x.cxx	2013-12-04 00:14:31 +0100
@@ -1003,7 +1003,6 @@
     return 0;
 
   case SelectionNotify: {
-    if (!fl_selection_requestor) return 0;
     static unsigned char* buffer = 0;
     if (buffer) {XFree(buffer); buffer = 0;}
     long bytesread = 0;
@@ -1057,6 +1056,9 @@
     }
     Fl::e_text = buffer ? (char*)buffer : (char *)"";
     Fl::e_length = bytesread;
+
+    if (!fl_selection_requestor) return 1;
+
     int old_event = Fl::e_number;
     fl_selection_requestor->handle(Fl::e_number = FL_PASTE);
     Fl::e_number = old_event;
@@ -1207,6 +1209,10 @@
       event = FL_DND_ENTER;
       Fl::e_text = unknown;
       Fl::e_length = unknown_len;
+      fl_selection_requestor = NULL;
+      XConvertSelection(fl_display, fl_XdndSelection,
+                        fl_dnd_type, XA_SECONDARY,
+                        fl_xevent->xclient.window, fl_event_time);
       break;
 
     } else if (message == fl_XdndPosition) {
@@ -1222,8 +1228,7 @@
       fl_event_time = data[3];
       fl_dnd_source_action = data[4];
       fl_dnd_action = fl_XdndActionCopy;
-      Fl::e_text = unknown;
-      Fl::e_length = unknown_len;
+
       int accept = Fl::handle(FL_DND_DRAG, window);
       fl_sendClientMessage(data[0], fl_XdndStatus,
                            fl_xevent->xclient.window,
@@ -1236,8 +1241,6 @@
     } else if (message == fl_XdndLeave) {
       fl_dnd_source_window = 0; // don't send a finished message to it
       event = FL_DND_LEAVE;
-      Fl::e_text = unknown;
-      Fl::e_length = unknown_len;
       break;
 
     } else if (message == fl_XdndDrop) {
